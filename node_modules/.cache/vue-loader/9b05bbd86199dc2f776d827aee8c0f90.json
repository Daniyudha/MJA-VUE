{"remainingRequest":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Home.vue?vue&type=template&id=fae5bece&","dependencies":[{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Home.vue","mtime":1623656758101},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXYgY2xhc3M9ImhvbWUiPgogIDwhLS0gQmFja2dyb3VuZCAtLT4KICA8ZGl2IGNsYXNzPSJjb250YWluZXItZmx1aWQgeiBvZmZzZXQtbGctNiBjb2wtbGctNiBvZmZzZXQtbWQtNCBjb2wtbWQtOCAtbXQtbiB3b3cgZmFkZUluUmlnaHQiPgogICAgICA8aW1nIGNsYXNzPSJtdC1iZyIgOnNyYz0icmVxdWlyZSgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEvYmctc2VjdGlvbi0xLnBuZycpIgogICAgICBhbHQ9IiIgLz4KICA8L2Rpdj4KCiAgPCEtLSBTVEFSVCBIRVJPIC0tPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBzZWMtaG9tZSI+CiAgICAgIDxkaXYgY2xhc3M9InJvdyBhbGlnbi1pdGVtcy1jZW50ZXIgbXQtbGctNSBtdC0wIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1sZy01IGNvbC1tZC01IG10LWxnLTUgbXQtZGVzIGQtbWQtYmxvY2sgZC1ub25lIHdvdyBmYWRlSW5MZWZ0IiBkYXRhLXdvdy1kZWxheT0iMjAwbXMiID4KICAgICAgICAgICAgICA8aDEgY2xhc3M9InQtaG9tZSI+CiAgICAgICAgICAgICAgUGVsdWFuZyBCaXNuaXMgPGJyLz4gTWFraW4gSmF5YSBBZ3VuZwogICAgICAgICAgICAgIDwvaDE+CiAgICAgICAgICAgICAgPHAgY2xhc3M9InRleHQtYWJ1bXVkYSI+CiAgICAgICAgICAgICAgICAgICJEYXBhdGthbiBwZW5naGFzaWxhbiBpbXBpYW4gYW5kYSB5YW5nIHRhayB0ZXJoaW5nZ2EgZGVuZ2FuCiAgICAgICAgICAgICAgICAgIG1lbXBlbGFqYXJpIEpVUlVTIEFKQUlCIGphbWFuIG5vdyB5YW5nIGFrYW4gbWVsZWppdGthbiBwZW5naGFzaWxhbgogICAgICAgICAgICAgICAgICBhbmRhIGJlcmxpcGF0LWxpcGF0IGJlcnNhbWEgTUpBLiIKICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCB3b3cgZmFkZUluTGVmdCIgZGF0YS13b3ctZGVsYXk9IjMwMG1zIj4KICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBjbGFzcz0iYnRuLWJnLWlqbyByb3VuZGVkLTE1IHB5LTIgcHgtNCI+Sm9pbiBOb3c8L2J1dHRvbj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPGRpdiBjbGFzcz0iY29sLWxnLTcgY29sLW1kLTcgb2Zmc2V0LWxnLSBvZmZzZXQtbWQtMCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtbGctMCBtdC1kZXMgd293IGZhZGVJblJpZ2h0IiBkYXRhLXdvdy1kZWxheT0iOTAwbXMiPgogICAgICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQiIDpzcmM9InJlcXVpcmUoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2ltYWdlLWhlYWRlci5wbmcnKSIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImQtbWQtbm9uZSBkLWJsb2NrIHdvdyBmYWRlSW5MZWZ0IiBkYXRhLXdvdy1kZWxheT0iNDAwbXMiPgogICAgICAgICAgPGgxPgogICAgICAgICAgUGVsdWFuZyBCaXNuaXMgPGJyIC8+IE1ha2luIEpheWEgQWd1bmcKICAgICAgICAgIDwvaDE+CiAgICAgICAgICA8cCBjbGFzcz0idGV4dC1hYnVtdWRhIj4KICAgICAgICAgICJEYXBhdGthbiBwZW5naGFzaWxhbiBpbXBpYW4gYW5kYSB5YW5nIHRhayB0ZXJoaW5nZ2EgZGVuZ2FuCiAgICAgICAgICBtZW1wZWxhamFyaSBKVVJVUyBBSkFJQiBqYW1hbiBub3cgeWFuZyBha2FuIG1lbGVqaXRrYW4gcGVuZ2hhc2lsYW4KICAgICAgICAgIGFuZGEgYmVybGlwYXQtbGlwYXQgYmVyc2FtYSBNSkEuIgogICAgICAgICAgPC9wPgogICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNCB0ZXh0LWxnLWxlZnQiPgogICAgICAgICAgPGEgY2xhc3M9ImJ0bi1iZy1pam8gcm91bmRlZC0xNSBweS0yIHB4LTQiIGhyZWY9IiI+Sm9pbiBOb3c8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgPC9kaXY+CiAgPCEtLSBFTkQgSEVSTyAtLT4KCiAgPCEtLSBTVEFSVCBQVCBNQUtJTiBKQVlBIC0tPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciBtdC1zZWN0aW9uIj4KICAgICAgICA8aDEgY2xhc3M9IndvdyBmYWRlSW5Eb3duIj5QVCBNQUtJTiBKQVlBIEFHVU5HPC9oMT4KICAgICAgICA8cCBjbGFzcz0idGV4dC1hYnVtdWRhIHdvdyBmYWRlSW5Eb3duIiBkYXRhLXdvdy1kZWxheT0iMjAwbXMiPgogICAgICAgIEJlcmdlcmFrIGRhbGFtIGJpZGFuZyBwZXJkYWdhbmdhbiBNYWthbmFuLCBNaW51bWFuLCBTdXBwbGVtZW50CiAgICAgICAgS2VzZWhhdGFuIGRhbiBLZWNhbnRpa2FuLiBQcm9kdWsgeWFuZyBkaXBlcmRhZ2FuZ2thbiBtZW1pbGlraSBjaXJpCiAgICAgICAga2hhcywgeWFpdHUgcHJvZHVrIGJlcmJhaGFuIGRhc2FyIGRhdW4gZ2FoYXJ1LgogICAgICAgIDwvcD4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0icm93IG10LTUganVzdGlmeS1jb250ZW50LWNlbnRlciBkLW1kLWZsZXggZC1ub25lIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtYi00IGNvbC1sZy00IGNvbC1tZC00Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtcHQgd293IGZhZGVJbkxlZnQiIGRhdGEtd293LWRlbGF5PSI1MDBtcyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEvc2VqYWstdGFodW4tMjAxMy5wbmcnKSIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUiPlNlamFrIFRhaHVuIDIwMTM8L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCB0ZXh0LWFidW11ZGEiPgogICAgICAgICAgICAgICAgICAgIERpcGltcGluIG9sZWggQmFwYWsgTXVoYW1tYWQgTWFraW51ZGluLCBTLkUuIHlhbmcgYmVyZ2VyYWsgZGkKICAgICAgICAgICAgICAgICAgICBiaWRhbmcgcGVtYmliaXRhbiBwb2hvbiBnYWhhcnUgZGFuIHByb2dyYW0ga2F2bGluZyBrZWJ1bgogICAgICAgICAgICAgICAgICAgIGdhaGFydS4KICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJtYi00IGNvbC1sZy00IGNvbC1tZC00Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXB0IHdvdyBmYWRlSW5VcCIgZGF0YS13b3ctZGVsYXk9IjgwMG1zIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICA8aW1nIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9wZXJrZWJ1bmFuLXNlbmRpcmkucG5nJykiIGFsdD0iIiAvPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlIj5QZXJrZWJ1bmFuIFNlbmRpcmk8L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGV4dCB0ZXh0LWFidW11ZGEiPgogICAgICAgICAgICAgICAgICAgIE1lbGFrdWthbiBwYW5lbiBkYXVuIGdhaGFydSBzZWNhcmEgYmVydGFoYXAgZGFyaSBwb2hvbiBnYWhhcnUKICAgICAgICAgICAgICAgICAgICB5YW5nIHN1ZGFoIGRpdGFuYW0gb2xlaCBwZXJ1c2FoYWFuLCBzYWF0IGluaSBwZXJ1c2FoYWFuIGp1Z2EKICAgICAgICAgICAgICAgICAgICBzdWRhaCBtdWxhaSBtZWxha3VrYW4ga2VnaWF0YW4gcHJvZHVrc2kgZGFyaSBoYXNpbCBwYW5lbiBkYXVuCiAgICAgICAgICAgICAgICAgICAgZ2FoYXJ1LgogICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibWItNCBjb2wtbGctNCBjb2wtbWQtNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXB0IHdvdyBmYWRlSW5SaWdodCIgZGF0YS13b3ctZGVsYXk9IjExMDBtcyI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEva29uc2VwLW1hcmtldGluZy5wbmcnKSIgYWx0PSIiIC8+CiAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10aXRsZSI+S29uc2VwIE1hcmtldGluZzwvcD4KICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQgdGV4dC1hYnVtdWRhIj4KICAgICAgICAgICAgICAgICAgICAgIEJpc25pcyBpbmkgYWthbiBtZW5qYWRpIGJpc25pcyB5YW5nIGJlc2FyLCBqYW5na2EgcGFuamFuZyBkYW4KICAgICAgICAgICAgICAgICAgICAgIG1hbXB1IG1lbmdoYW50YXJrYW4gbWl0cmEgdXNhaGFueWEgbWVudWp1IGtlc2VqYWh0ZXJhYW4gaGlkdXAKICAgICAgICAgICAgICAgICAgICAgIHNlcnRhIG1lbmNhcGFpIHNlcnRhIG1lbmNhcGFpIHB1bmNhayBrZXN1a3Nlc2FuLgogICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgoKICAgICAgPCEtLSBSZXNwb25zaXZlIC0tPgogICAgICA8ZGl2IGNsYXNzPSJkLWxnLW5vbmUgZC1tZC1ub25lIGQtYmxvY2sgbXQtNSI+CiAgICAgICAgPGNhcm91c2VsIGNsYXNzPSJjYXJkLWNhcm91c2VsIiA6cmVzcG9uc2l2ZT0iezA6e2l0ZW1zOjEsbmF2OmZhbHNlfX0iIAogICAgICAgICAgOmNlbnRlcj0idHJ1ZSIgOmxvb3A9InRydWUiIDpkb3RzPSJ0cnVlIiA6bmF2VGV4dD0ibmF2U2xpZGUiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtcHQiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL3NlamFrLXRhaHVuLTIwMTMucG5nJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9ImNhcmQtdGl0bGUiPlNlamFrIFRhaHVuIDIwMTM8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQgdGV4dC1hYnVtdWRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlwaW1waW4gb2xlaCBCYXBhayBNdWhhbW1hZCBNYWtpbnVkaW4sIFMuRS4geWFuZyBiZXJnZXJhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaSBiaWRhbmcgcGVtYmliaXRhbiBwb2hvbiBnYWhhcnUgZGFuIHByb2dyYW0ga2F2bGluZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZWJ1biBnYWhhcnUuCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvcD4KICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1wdCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9wZXJrZWJ1bmFuLXNlbmRpcmkucG5nJykiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY2FyZC10aXRsZSI+UGVya2VidW5hbiBTZW5kaXJpPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQgdGV4dC1hYnVtdWRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNZWxha3VrYW4gcGFuZW4gZGF1biBnYWhhcnUgc2VjYXJhIGJlcnRhaGFwIGRhcmkgcG9ob24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYWhhcnUgeWFuZyBzdWRhaCBkaXRhbmFtIG9sZWggcGVydXNhaGFhbiwgc2FhdCBpbmkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXJ1c2FoYWFuIGp1Z2Egc3VkYWggbXVsYWkgbWVsYWt1a2FuIGtlZ2lhdGFuIHByb2R1a3NpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFyaSBoYXNpbCBwYW5lbiBkYXVuIGdhaGFydS4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXB0Ij4KICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEva29uc2VwLW1hcmtldGluZy5wbmcnKSIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgICAgICAgICAgICAgICAvPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRpdGxlIj5Lb25zZXAgTWFya2V0aW5nPC9wPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjYXJkLXRleHQgdGV4dC1hYnVtdWRhIj4KICAgICAgICAgICAgICAgICAgICAgICAgICBCaXNuaXMgaW5pIGFrYW4gbWVuamFkaSBiaXNuaXMgeWFuZyBiZXNhciwgamFuZ2thIHBhbmphbmcKICAgICAgICAgICAgICAgICAgICAgICAgICBkYW4gbWFtcHUgbWVuZ2hhbnRhcmthbiBtaXRyYSB1c2FoYW55YSBtZW51anUKICAgICAgICAgICAgICAgICAgICAgICAgICBrZXNlamFodGVyYWFuIGhpZHVwIHNlcnRhIG1lbmNhcGFpIHNlcnRhIG1lbmNhcGFpIHB1bmNhawogICAgICAgICAgICAgICAgICAgICAgICAgIGtlc3Vrc2VzYW4uCiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Nhcm91c2VsPgogICAgICA8L2Rpdj4KICAgIDwhLS0gZW5kIHJlc3BvbnNpdmUgLS0+CiAgPC9kaXY+CiAgPCEtLSBFTkQgUFQgTUFLSU4gSkFZQSAtLT4KCiAgPCEtLSBCYWNrZ3JvdW5kIC0tPgo8ZGl2IGNsYXNzPSJ6IGJnLTEtMiB3b3cgZmFkZUluTGVmdCIgZGF0YS13b3ctZGVsYXk9IjEzMDBtcyI+CiAgPGltZyBjbGFzcz0iaW1nLWJnLWtpcmkiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTItMy5wbmcnKSIgYWx0PSIiPgo8L2Rpdj4KCjwhLS0gU1RBUlQgUFJPRFVLIE1KQSAtLT4KPGRpdiBjbGFzcz0iY29udGFpbmVyIG10LTUgbXQtbWQtMCI+CiAgPGRpdiBjbGFzcz0icm93Ij4KICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC0xMiBjb2wtMTIiPgogICAgICA8ZGl2IGNsYXNzPSItbXQtc2VjdGlvbiI+CiAgICAgICAgPGgxIGNsYXNzPSJ3b3cgZmFkZUluTGVmdCI+UFJPRFVLIE1KQTwvaDE+CiAgICAgICAgPHAgY2xhc3M9InRleHQtYWJ1bXVkYSB3b3cgZmFkZUluTGVmdCIgZGF0YS13b3ctZGVsYXk9IjMwMG1zIj5QVC4gTUFLSU4gSkFZQSBBR1VORyBtZW55ZWRpYWthbiBwcm9kdWsgTWFrYW5hbiBkYW4gTWludW1hbiBTdXBsZW1lbiBLZXNlaGF0YW4KICAgICAgICAgIEhlcmJhbAogICAgICAgICAgYmVyYmFoYW4gZGFzYXIgRXh0cmFrIERhdW4gR2FoYXJ1IGRlbmdhbiBrdWFsaXRhcyB0ZXJiYWlrIGRhbiBtZW5nZ3VuYWthbiBiYWhhbi1iYWhhbiBiZXJrdWFsaXRhcyB5YW5nCiAgICAgICAgICB0ZW50dQogICAgICAgICAgdGVsYWggbWVsYWx1aSBwcm9zZXMgcXVhbGl0eSBjb250cm9sIHlhbmcgYmFpay48L3A+CiAgICAgIDwvZGl2PgogICAgICA8YSBocmVmPSIiIGNsYXNzPSJsaXN0Ij4KICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbWwtMSBtdC00IG10LW1kLTUgbGlzdC1wcm9kdWsgYWxpZ24taXRlbXMtY2VudGVyIHdvdyBmYWRlSW5VcCIgZGF0YS13b3ctZGVsYXk9IjUwMG1zIj4KICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2RhdS1nYWhhcnUucG5nJykiIGFsdD0iIj4KICAgICAgICAgIDxwIGNsYXNzPSJteS1tZC0zIG15LTAgbGlzdC1kIj5EYXVuIEdhaGFydSBTZWJhZ2FpIEFudGkgRGVwcmVzPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2E+CiAgICAgIDxhIGhyZWY9IiIgY2xhc3M9Imxpc3QiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtbC0xIG10LTMgbGlzdC1wcm9kdWsgYWxpZ24taXRlbXMtY2VudGVyIHdvdyBmYWRlSW5VcCIgZGF0YS13b3ctZGVsYXk9IjcwMG1zIj4KICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL3RlaC1kYXVuLWdhaGFydS5wbmcnKSIgYWx0PSIiPgogICAgICAgICAgPHAgY2xhc3M9Im15LW1kLTMgbXktMCBsaXN0LWQiPkRhdW4gR2FoYXJ1IFNlYmFnYWkgQW50aSBQZW51YWFuPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2E+CiAgICAgIDxhIGhyZWY9IiIgY2xhc3M9Imxpc3QiPgogICAgICAgIDxkaXYgY2xhc3M9InJvdyBtbC0xIG10LTMgbGlzdC1wcm9kdWsgYWxpZ24taXRlbXMtY2VudGVyIHdvdyBmYWRlSW5VcCIgZGF0YS13b3ctZGVsYXk9IjkwMG1zIj4KICAgICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL21lbmphZ2EtYmVyYXQtYmFkYW4ucG5nJykiIGFsdD0iIj4KICAgICAgICAgIDxwIGNsYXNzPSJteS1tZC0zIG15LTAgbGlzdC1kIj5NZW5qYWdhIEJlcmF0IEJhZGFuPC9wPgogICAgICAgIDwvZGl2PgogICAgICA8L2E+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9ImNvbC1sZy02IGNvbC1tZC0xMiI+CiAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIG10LWxnLTAgbXQtNCI+CiAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIHdvdyBmYWRlSW5SaWdodCIgZGF0YS13b3ctZGVsYXk9IjEyMDBtcyIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL3RlaC1nYWhhcnUucG5nJykiIGFsdD0iIj4KICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgbXQtMiB3b3cgZmFkZUluVXAiIGRhdGEtd293LWRlbGF5PSIxNDAwbXMiPlRlaCBIaWphdSBHYWhhcnU8L2g1PgogICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWFidW11ZGEgd293IGZhZGVJblVwIiBkYXRhLXdvdy1kZWxheT0iMTYwMG1zIj5UZXJidWF0IGRhcmkgUHVjdWsgRGF1biBHYWhhcnUgcGlsaWhhbiBqZW5pcyBBcXVpbGFyaWEgTWFsbGFjZW5zaXMgZGlwcm9zZXMgc2VjYXJhCiAgICAgICAgICBoaWdlbmlzIGRhbiBkaWphZ2Ega2VtdXJuaWFhbm55YS48L3A+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0icm93IG10LTUgYWxpZ24taXRlbXMtY2VudGVyIHRleHQtY2VudGVyIj4KICAgIDxkaXYgY2xhc3M9Im1iLTUgY29sLWxnLTIgY29sLW1kLTQgY29sLTYgd293IHpvb21JbiIgZGF0YS13b3ctZGVsYXk9IjE4MDBtcyI+CiAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Byb2R1ayI+CiAgICAgICAgPGltZyBjbGFzcz0icHJvIGltZy1vcGFjaXR5IGltZy1mbHVpZCIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9wcm9kdWsvdGVoLWdhaGFydS5wbmcnKSIgYWx0PSIiPgogICAgICA8L3JvdXRlci1saW5rPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtYi01IGNvbC1sZy0yIGNvbC1tZC00IGNvbC02IHdvdyB6b29tSW4iIGRhdGEtd293LWRlbGF5PSIyMDAwbXMiPgogICAgICA8cm91dGVyLWxpbmsgdG89Ii9wcm9kdWsiPgogICAgICAgIDxpbWcgY2xhc3M9InBybyBpbWctb3BhY2l0eSBpbWctZmx1aWQiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL3NhYnVuLWdhaGFydS5wbmcnKSIgYWx0PSIiPgogICAgICA8L3JvdXRlci1saW5rPgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtYi01IGNvbC1sZy0yIGNvbC1tZC00IGNvbC02IHdvdyB6b29tSW4iIGRhdGEtd293LWRlbGF5PSIyMjAwbXMiPgogICAgICA8cm91dGVyLWxpbmsgdG89Ii9wcm9kdWsiPgogICAgICAgIDxpbWcgY2xhc3M9InBybyBpbWctb3BhY2l0eSBpbWctZmx1aWQiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL3NhcmktZ2FoYXJ1LnBuZycpIiBhbHQ9IiI+CiAgICAgIDwvcm91dGVyLWxpbms+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1iLTUgY29sLWxnLTIgY29sLW1kLTQgY29sLTYgd293IHpvb21JbiIgZGF0YS13b3ctZGVsYXk9IjI0MDBtcyI+CiAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Byb2R1ayI+CiAgICAgICAgPGltZyBjbGFzcz0icHJvIGltZy1vcGFjaXR5IGltZy1mbHVpZCIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9wcm9kdWsva29waS1wZXJrYXNhLnBuZycpIiBhbHQ9IiI+CiAgICAgIDwvcm91dGVyLWxpbms+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1iLTUgY29sLWxnLTIgY29sLW1kLTQgY29sLTYgd293IHpvb21JbiIgZGF0YS13b3ctZGVsYXk9IjI2MDBtcyI+CiAgICAgIDxyb3V0ZXItbGluayB0bz0iL3Byb2R1ayI+CiAgICAgIDxpbWcgY2xhc3M9InBybyBpbWctb3BhY2l0eSBpbWctZmx1aWQiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL21hZHUtc21hcnQucG5nJykiIGFsdD0iIj4KICAgICAgPC9yb3V0ZXItbGluaz4KICAgIDwvZGl2PgogICAgPGRpdiBjbGFzcz0ibWItNSBjb2wtbGctMiBjb2wtbWQtNCBjb2wtNiB3b3cgem9vbUluIiBkYXRhLXdvdy1kZWxheT0iMjgwMG1zIj4KICAgICAgPHJvdXRlci1saW5rIHRvPSIvcHJvZHVrIj4KICAgICAgPGltZyBjbGFzcz0icHJvIGltZy1vcGFjaXR5IGltZy1mbHVpZCIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9wcm9kdWsvamVsaXRhLnBuZycpIiBhbHQ9IiI+CiAgICAgIDwvcm91dGVyLWxpbms+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CjwhLS0gRU5EIFBST0RVSyBNSkEgLS0+Cgo8IS0tIEJhY2tncm91bmcgMy00IC0tPgo8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCB6IGJnLTEtMiBtdCB3b3cgZmFkZUluUmlnaHQiIGRhdGEtd293LWRlbGF5PSIzMDAwbXMiPgogIDxpbWcgY2xhc3M9ImltZy1iZy1rYW5hbiIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2JnLXNlY3Rpb24tMy00IDEucG5nJykiIGFsdD0iIj4KPC9kaXY+Cgo8IS0tIFNUQVJUIFRFU1RJTU9OSSAtLT4KPGRpdiBjbGFzcz0iY29udGFpbmVyIG10LXNlY3Rpb24tMiI+CiAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIgbWItNCI+CiAgICAgIDxoMT5UZXN0aW1vbmk8L2gxPgogIDwvZGl2PgogIDxjYXJvdXNlbCBjbGFzcz0idGVzdGktaG9tZS1jYXJvdXNlbCIgOnJlc3BvbnNpdmU9InswOntpdGVtczoxLG5hdjpmYWxzZX0sNjAwOntpdGVtczoxLG5hdjp0cnVlfSw5MDA6e2l0ZW1zOjEsbmF2OnRydWV9fSIgCiAgICAgIDpjZW50ZXI9InRydWUiIDpsb29wPSJ0cnVlIiA6ZG90cz0idHJ1ZSIgOm5hdlRleHQ9Im5hdlNsaWRlIiBpZD0ibGVnYWwiPgoKICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICA8aW1nIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS90ZXN0aW1vbmktaWNvbi5zdmcnKSIgYWx0PSIiPgogICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWFidW11ZGEgbXQtNCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQWxpcXVhbQogICAgICAgICAgcG9ydHRpdG9yZGFwaWJ1cyBkaWN0dW0uCiAgICAgICAgICBGdXNjZSBmYXVjaWJ1cyBsaWd1bGEgc2NlbGVyaXNxdWUsIGVsZWlmZW5kIHR1cnBpcyBpbjwvcD4KICAgICAgICA8aW1nIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvdGVzdGltb25pLzQucG5nJykiIGFsdD0iIiBjbGFzcz0iY2VudGVyLWJsb2NrIHRlYW0iPgogICAgPC9kaXY+CgogICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL3Rlc3RpbW9uaS1pY29uLnN2ZycpIiBhbHQ9IiI+CiAgICAgICAgPHAgY2xhc3M9InRleHQtYWJ1bXVkYSBtdC00Ij5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBBbGlxdWFtCiAgICAgICAgICBwb3J0dGl0b3JkYXBpYnVzIGRpY3R1bS4gRnVzY2UgZmF1Y2lidXMgbGlndWxhIHNjZWxlcmlzcXVlLCBlbGVpZmVuZCB0dXJwaXMgaW48L3A+CiAgICAgICAgPGltZyA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL3Rlc3RpbW9uaS80LnBuZycpIiBhbHQ9IiIgY2xhc3M9ImNlbnRlci1ibG9jayB0ZWFtIj4KICAgIDwvZGl2PgoKICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICA8aW1nIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS90ZXN0aW1vbmktaWNvbi5zdmcnKSIgYWx0PSIiPgogICAgICAgIDxwIGNsYXNzPSJ0ZXh0LWFidW11ZGEgbXQtNCI+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQWxpcXVhbQogICAgICAgICAgcG9ydHRpdG9yZGFwaWJ1cyBkaWN0dW0uIEZ1c2NlIGZhdWNpYnVzIGxpZ3VsYSBzY2VsZXJpc3F1ZSwgZWxlaWZlbmQgdHVycGlzIGluPC9wPgogICAgICAgIDxpbWcgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy90ZXN0aW1vbmkvNC5wbmcnKSIgYWx0PSIiIGNsYXNzPSJjZW50ZXItYmxvY2sgdGVhbSI+CiAgICA8L2Rpdj4KICA8L2Nhcm91c2VsPgo8L2Rpdj4KPGRpdiBjbGFzcz0ibXQtNSB0ZXh0LWNlbnRlciB3b3cgZmFkZUluTGVmdCIgZGF0YS13b3ctZGVsYXk9IjMwMG1zIj4KICA8YSBjbGFzcz0iYnRuLWJnLWlqbyByb3VuZGVkLTE1IHB5LTIgcHgtNCIgaHJlZj0iL3Rlc3RpbW9uaWFsIj5UZXN0aW1vbmkgTGFpbm55YTwvYT4KPC9kaXY+CjwhLS0gRU5EIFRFU1RJTU9OSSAtLT4KCjwhLS0gQmFja2dyb3VuZyA0LTUgLS0+CjxkaXYgY2xhc3M9InogYmctMS0yIG10Ij4KICA8aW1nIGNsYXNzPSJpbWctYmcta2lyaSBtYi01IG1iLW1kLTAiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTQtNS5wbmcnKSIgYWx0PSIiPgo8L2Rpdj4KCjwhLS0gU1RBUlQgQkVSSVRBICYgQVJUSUtFTCAtLT4KPGRpdiBjbGFzcz0iY29udGFpbmVyIC1tdC1zZWN0aW9uIj4KICA8aDEgY2xhc3M9InRleHQtYWJ1IHdvdyBmYWRlSW5MZWZ0Ij5CZXJpdGEgJiBBcnRpa2VsPC9oMT4KICA8cCBjbGFzcz0idGV4dC1hYnVtdWRhIHdvdyBmYWRlSW5MZWZ0IiBkYXRhLXdvdy1kZWxheT0iMjAwbXMiPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEFsaXF1YW0KICAgIHBvcnR0aXRvcmRhcGlidXMgZGljdHVtLjwvcD4KICA8ZGl2IGNsYXNzPSJyb3cganVzdGlmeS1jb250ZW50LWNlbnRlciBkLW1kLWZsZXggZC1ub25lIj4KICAgIDxkaXYgY2xhc3M9Im1iLTQgY29sLW1kLTQiPgogICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJlcml0YSB3b3cgZmFkZUluTGVmdCIgZGF0YS13b3ctZGVsYXk9IjQwMG1zIj4KICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZC0xNSIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2FydGlrZWwtMS5wbmcnKSIgYWx0PSIiPgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+R29hbHM8L2g1PgogICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQgZC1sZy1ub25lIGQtbWQtYmxvY2sgZC1ub25lIj5LYW1pPC9oNT4KICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQWxpcXVhbQogICAgICAgICAgICAgIHBvcnR0aXRvcmRhcGlidXMgZGljdHVtLjwvcD4KICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0iYnRuIj5TZWxlbmdrYXBueWE8L2E+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgIDxkaXYgY2xhc3M9Im1iLTQgY29sLW1kLTQiPgogICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJlcml0YSB3b3cgZmFkZUluVXAiIGRhdGEtd293LWRlbGF5PSI2MDBtcyI+CiAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQtMTUiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9hcnRpa2VsLTIucG5nJykiIGFsdD0iIj4KICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPktldW50dW5nYW4gTWVuYXJpazwvaDU+CiAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEFsaXF1YW0KICAgICAgICAgICAgICBwb3J0dGl0b3JkYXBpYnVzIGRpY3R1bS48L3A+CiAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9ImJ0biI+U2VsZW5na2FwbnlhPC9hPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJtYi00IGNvbC1tZC00Ij4KICAgICAgPGRpdiBjbGFzcz0iY2FyZC1iZXJpdGEgd293IGZhZGVJblJpZ2h0IiBkYXRhLXdvdy1kZWxheT0iODAwbXMiPgogICAgICAgIDxpbWcgY2xhc3M9ImltZy1mbHVpZCByb3VuZGVkLTE1IiA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEvYXJ0aWtlbC0zLnBuZycpIiBhbHQ9IiI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgPGg1IGNsYXNzPSJmb250LXdlaWdodC1ib2xkIj5LZXN1a3Nlc2FuIEJlcnNhbWE8L2g1PgogICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBBbGlxdWFtCiAgICAgICAgICAgICAgcG9ydHRpdG9yZGFwaWJ1cyBkaWN0dW0uPC9wPgogICAgICAgICAgICA8YSBocmVmPSIiIGNsYXNzPSJidG4iPlNlbGVuZ2thcG55YTwvYT4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2PgoKICA8IS0tIFJlc3BvbnNpdmUgLS0+CiAgPGRpdiBjbGFzcz0iZC1sZy1ub25lIGQtbWQtbm9uZSBkLWJsb2NrIG10LTUiPgogICAgICA8Y2Fyb3VzZWwgY2xhc3M9InRlc3RpLWhvbWUtY2Fyb3VzZWwiIDpyZXNwb25zaXZlPSJ7MDp7aXRlbXM6MSxuYXY6ZmFsc2V9fSIgCiAgICAgICAgOmNlbnRlcj0iZmFsc2UiIDpsb29wPSJ0cnVlIiA6ZG90cz0idHJ1ZSIgOm5hdlRleHQ9Im5hdlNsaWRlIiBpZD0ibGVnYWwiPgogICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYmVyaXRhIj4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZC0xNSIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2FydGlrZWwtMS5wbmcnKSIgYWx0PSIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+R29hbHM8L2g1PgogICAgICAgICAgICAgICAgICA8cD5Mb3JlbSBpcHN1bSBkb2xvciBzaXQgYW1ldCwgY29uc2VjdGV0dXIgYWRpcGlzY2luZyBlbGl0LiBBbGlxdWFtCiAgICAgICAgICAgICAgICAgICAgcG9ydHRpdG9yZGFwaWJ1cyBkaWN0dW0uPC9wPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIiIGNsYXNzPSJidG4iPlNlbGVuZ2thcG55YTwvYT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgICAgPGRpdiBjbGFzcz0ibWItNCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYmVyaXRhIj4KICAgICAgICAgICAgICA8aW1nIGNsYXNzPSJpbWctZmx1aWQgcm91bmRlZC0xNSIgOnNyYz0icmVxdWlyZSAoJ0AvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2FydGlrZWwtMi5wbmcnKSIgYWx0PSIiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0iZm9udC13ZWlnaHQtYm9sZCI+S2V1bnR1bmdhbiBNZW5hcmlrPC9oNT4KICAgICAgICAgICAgICAgICAgPHA+TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdC4gQWxpcXVhbQogICAgICAgICAgICAgICAgICAgIHBvcnR0aXRvcmRhcGlidXMgZGljdHVtLjwvcD4KICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0iYnRuIj5TZWxlbmdrYXBueWE8L2E+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICAgIDxkaXYgY2xhc3M9Im1iLTQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJlcml0YSI+CiAgICAgICAgICAgICAgPGltZyBjbGFzcz0iaW1nLWZsdWlkIHJvdW5kZWQtMTUiIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9hcnRpa2VsLTMucG5nJykiIGFsdD0iIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgICA8aDUgY2xhc3M9ImZvbnQtd2VpZ2h0LWJvbGQiPktlc3Vrc2VzYW4gQmVyc2FtYTwvaDU+CiAgICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIEFsaXF1YW0KICAgICAgICAgICAgICAgICAgICBwb3J0dGl0b3JkYXBpYnVzIGRpY3R1bS48L3A+CiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9ImJ0biI+U2VsZW5na2FwbnlhPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvY2Fyb3VzZWw+CiAgPC9kaXY+CiAgPCEtLSBlbmQgcmVzcG9uc2l2ZSAtLT4KPC9kaXY+CjwhLS0gRU5EIEJFUklUQSAmIEFSVElLRUwgLS0+Cgo8IS0tIEJhY2tncm91bmcgNS02IC0tPgo8ZGl2IGNsYXNzPSJmbG9hdC1yaWdodCB6IGJnLTEtMiBkLW1kLWlubGluZSBkLW5vbmUgd293IGZhZGVJblVwIj4KICA8aW1nIGNsYXNzPSJpbWctYmcta2FuYW4gLW10LXNlY3Rpb24iIDpzcmM9InJlcXVpcmUgKCdAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTUtNi5zdmcnKSIgYWx0PSIiPgo8L2Rpdj4KCjwhLS0gU1RBUlQgQ1VTVE9NRVIgU0VSVklDRSAtLT4KPHNlY3Rpb24gY2xhc3M9Im10LXNlY3Rpb24tMiBwb3NpdGlvbi1yZWxhdGl2ZSI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIGQtbWQtYmxvY2sgZC1ub25lIj4KICAgIDxoMSBjbGFzcz0idGV4dC1jZW50ZXIgd293IGZhZGVJbkRvd24iPkN1c3RvbWVyIFNlcnZpY2UgU3VwcG9ydDwvaDE+CiAgICA8ZGl2IGNsYXNzPSJyb3cgbXQtNSBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIj4KICAgICAgPGRpdiBjbGFzcz0ibWItNCBjb2wtbGctMyBjb2wtbWQtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1zdXBwb3J0IHdvdyBmYWRlSW5MZWZ0IiBkYXRhLXdvdy1kZWxheT0iMjAwbXMiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgIDxoNSBjbGFzcz0idGl0bGUtc3VwcG9ydCI+QURNSU4gQk9OVVM8L2g1PgogICAgICAgICAgICAgIDx1bCBjbGFzcz0idGV4dC1sZWZ0IG10LTUiPgogICAgICAgICAgICAgICAgPGxpPjI0Lzc8L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJub3QiPlRlbGVwb248L2xpPgogICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJub3QiPlNNUzwvbGk+CiAgICAgICAgICAgICAgICA8bGk+V2hhdHNhcHA8L2xpPgogICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0iYnRuIG10LTQiPjxpIGNsYXNzPSJmYWIgZmEtd2hhdHNhcHAgbXItMiI+PC9pPldoYXRzYXBwPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPGRpdiBjbGFzcz0ibWItNCBjb2wtbGctMyBjb2wtbWQtNCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1zdXBwb3J0IHdvdyBmYWRlSW5VcCIgZGF0YS13b3ctZGVsYXk9IjQwMG1zIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICA8aDUgY2xhc3M9InRpdGxlLXN1cHBvcnQiPkFETUlOIEtPTlNVTFRBU0kgUFJPRFVLPC9oNT4KICAgICAgICAgICAgICA8dWwgY2xhc3M9InRleHQtbGVmdCBtdC01Ij4KICAgICAgICAgICAgICAgIDxsaT4yNC83PC9saT4KICAgICAgICAgICAgICAgIDxsaT5UZWxlcG9uPC9saT4KICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibm90Ij5TTVM8L2xpPgogICAgICAgICAgICAgICAgPGxpPldoYXRzYXBwPC9saT4KICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9ImJ0biBtdC00Ij48aSBjbGFzcz0iZmFiIGZhLXdoYXRzYXBwIG1yLTIiPjwvaT5XaGF0c2FwcDwvYT4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Im1iLTQgY29sLWxnLTMgY29sLW1kLTQiPgogICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtc3VwcG9ydCB3b3cgZmFkZUluUmlnaHQiIGRhdGEtd293LWRlbGF5PSI2MDBtcyI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0aXRsZS1zdXBwb3J0Ij5BRE1JTiBFRElUIFBST0ZJTDwvaDU+CiAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0ZXh0LWxlZnQgbXQtNSI+CiAgICAgICAgICAgICAgICA8bGk+MjQvNzwvbGk+CiAgICAgICAgICAgICAgICA8bGk+VGVsZXBvbjwvbGk+CiAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5vdCI+U01TPC9saT4KICAgICAgICAgICAgICAgIDxsaT5XaGF0c2FwcDwvbGk+CiAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICA8YSBocmVmPSIiIGNsYXNzPSJidG4gbXQtNCI+PGkgY2xhc3M9ImZhYiBmYS13aGF0c2FwcCBtci0yIj48L2k+V2hhdHNhcHA8L2E+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+CgogIDwhLS0gUmVzcG9uc2l2ZSAtLT4KICA8IS0tIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+IC0tPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBkLWxnLW5vbmUgZC1tZC1ub25lIGQtYmxvY2sgbWItNSI+CiAgICA8aDMgY2xhc3M9InRleHQtY2VudGVyIj5DdXN0b21lciBTZXJ2aWNlIFN1cHBvcnQ8L2gzPgogICAgPGNhcm91c2VsIGNsYXNzPSJjYXJkLWNhcm91c2VsIG10LTUiIDpyZXNwb25zaXZlPSJ7MDp7aXRlbXM6MSxuYXY6ZmFsc2V9fSIgCiAgICAgIDpjZW50ZXI9InRydWUiIDpsb29wPSJ0cnVlIiA6ZG90cz0idHJ1ZSIgOm5hdlRleHQ9Im5hdlNsaWRlIiA6bmF2PSJ0cnVlIj4KICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgPGRpdiBjbGFzcz0ibWItNCI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXN1cHBvcnQiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWJvZHkiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRleHQtY2VudGVyIj4KICAgICAgICAgICAgICAgIDxoNSBjbGFzcz0idGl0bGUtc3VwcG9ydCI+QURNSU4gQk9OVVM8L2g1PgogICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJ0ZXh0LWxlZnQgbXQtNSI+CiAgICAgICAgICAgICAgICAgIDxsaT4yNC83PC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJub3QiPlRlbGVwb248L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5vdCI+U01TPC9saT4KICAgICAgICAgICAgICAgICAgPGxpPldoYXRzYXBwPC9saT4KICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgICA8YSBocmVmPSIiIGNsYXNzPSJidG4gbXQtNCI+PGkgY2xhc3M9ImZhYiBmYS13aGF0c2FwcCBtci0yIj48L2k+V2hhdHNhcHA8L2E+CiAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJpdGVtIj4KICAgICAgICA8ZGl2IGNsYXNzPSJtYi00Ij4KICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtc3VwcG9ydCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtYm9keSI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1jZW50ZXIiPgogICAgICAgICAgICAgICAgPGg1IGNsYXNzPSJ0aXRsZS1zdXBwb3J0Ij5BRE1JTiBLT05TVUxUQVNJIFBST0RVSzwvaDU+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9InRleHQtbGVmdCBtdC01Ij4KICAgICAgICAgICAgICAgICAgPGxpPjI0Lzc8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+VGVsZXBvbjwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibm90Ij5TTVM8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+V2hhdHNhcHA8L2xpPgogICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgIDxhIGhyZWY9IiIgY2xhc3M9ImJ0biBtdC00Ij48aSBjbGFzcz0iZmFiIGZhLXdoYXRzYXBwIG1yLTIiPjwvaT5XaGF0c2FwcDwvYT4KICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9Iml0ZW0iPgogICAgICAgIDxkaXYgY2xhc3M9Im1iLTQiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1zdXBwb3J0Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1ib2R5Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LWNlbnRlciI+CiAgICAgICAgICAgICAgICA8aDUgY2xhc3M9InRpdGxlLXN1cHBvcnQiPkFETUlOIEVESVQgUFJPRklMPC9oNT4KICAgICAgICAgICAgICAgIDx1bCBjbGFzcz0idGV4dC1sZWZ0IG10LTUiPgogICAgICAgICAgICAgICAgICA8bGk+MjQvNzwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT5UZWxlcG9uPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJub3QiPlNNUzwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT5XaGF0c2FwcDwvbGk+CiAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iIiBjbGFzcz0iYnRuIG10LTQiPjxpIGNsYXNzPSJmYWIgZmEtd2hhdHNhcHAgbXItMiI+PC9pPldoYXRzYXBwPC9hPgogICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgIDwvZGl2PgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvY2Fyb3VzZWw+CiAgPC9kaXY+CiAgPCEtLSBlbmQgcmVzcG9uc2l2ZSAtLT4KPC9zZWN0aW9uPgo8IS0tIEVORCBDVVNUT01FUiBTRVJWSUNFIC0tPgoKPCEtLSBCYWNrZ3JvdW5nIDYtNyAtLT4KPGRpdiBjbGFzcz0ieiBiZy0xLTIgd293IGZhZGVJblVwIiBkYXRhLXdvdy1kZWxheT0iODAwbXMiPgogIDxpbWcgY2xhc3M9ImltZy1iZy0yIiA6c3JjPSJyZXF1aXJlICgnQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEvYmctc2VjdGlvbi02LTcucG5nJykiIGFsdD0iIj4KPC9kaXY+Cgo8QmFubmVyLz4KCjwvZGl2Pgo="},null]}