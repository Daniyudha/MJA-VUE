{"remainingRequest":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/src/views/TentangKami.vue?vue&type=template&id=1f4ffbcb&","dependencies":[{"path":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/src/views/TentangKami.vue","mtime":1618901550721},{"path":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/MLM Template-lebahmadu/MLM-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}