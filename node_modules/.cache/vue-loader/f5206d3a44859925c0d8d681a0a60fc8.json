{"remainingRequest":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Testimonial.vue?vue&type=template&id=38ec5656&","dependencies":[{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Testimonial.vue","mtime":1623295460929},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}