{"remainingRequest":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Artikel.vue?vue&type=template&id=5a674ae2&","dependencies":[{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Artikel.vue","mtime":1623653581395},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}