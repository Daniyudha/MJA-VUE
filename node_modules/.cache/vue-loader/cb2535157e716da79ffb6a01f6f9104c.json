{"remainingRequest":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Produk.vue?vue&type=template&id=f3ad2732&scoped=true&","dependencies":[{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/src/views/Produk.vue","mtime":1623228383938},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/macbookpro/Documents/Kerjaan/PT MJA/MJA-Vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAicHJvZHVrIiB9LCBbCiAgICBfYygKICAgICAgImRpdiIsCiAgICAgIHsKICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICJ6IG9mZnNldC1sZy02IGNvbC1sZy02IG9mZnNldC1tZC00IGNvbC1tZC04IC1tdC1uIGQtbm9uZSBkLW1kLWJsb2NrIHdvdyBmYWRlSW5SaWdodCIKICAgICAgfSwKICAgICAgWwogICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICBzdGF0aWNDbGFzczogIm10LWJnIiwKICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL2JlcmFuZGEvYmctc2VjdGlvbi0xLnBuZyIpLAogICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICB9CiAgICAgICAgfSkKICAgICAgXQogICAgKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIHNlYy1wcm9kdWsiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJyb3cgYWxpZ24taXRlbXMtY2VudGVyIiB9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiZGl2IiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb2wtbGctNSBjb2wtbWQtNSBtdC01IHdvdyBmYWRlSW5MZWZ0IiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjIwMG1zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIHoiLAogICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9wcm9kdWsvaWx1cy1wcm9kdWstaGVhZGVyLnBuZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkKICAgICAgICAgIF0KICAgICAgICApLAogICAgICAgIF92bS5fbSgwKQogICAgICBdKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbnRhaW5lciBtdC1zZWN0aW9uIiB9LCBbCiAgICAgIF9jKCJoMSIsIHsgc3RhdGljQ2xhc3M6ICJ3b3cgZmFkZUluRG93biIgfSwgW192bS5fdigiUFJPRFVLIEtBTUkiKV0pLAogICAgICBfYygiaHIiLCB7IHN0YXRpY0NsYXNzOiAiZ2FyaXMgZmxvYXQtbGVmdCB3b3cgZmFkZUluVXAiIH0pLAogICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyBtdC1zZWN0aW9uIGFsaWduLWl0ZW1zLWNlbnRlciIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7CiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sLWxnLTYgb2Zmc2V0LWxnLTEgY29sLW1kLTYgY29sLTEyIHdvdyBmYWRlSW5MZWZ0IiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjIwMG1zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL3RlaC1nYWhhcnUucG5nIiksCiAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KQogICAgICAgICAgXQogICAgICAgICksCiAgICAgICAgX3ZtLl9tKDEpCiAgICAgIF0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAieiBiZy0xLTIgd293IGZhZGVJbkxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZy1iZy1raXJpIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTItMy5wbmciKSwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIC1tdC1zZWN0aW9uIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsgc3RhdGljQ2xhc3M6ICJyb3cgYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAiY29sLWxnLTEyIG9mZnNldC1sZy0yIGNvbC1tZC02IGNvbC0xMCBtdC01IGQtYmxvY2sgZC1tZC1ub25lIG1iLTUgd293IGZhZGVJbiIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9wcm9kdWsva29waS1wZXJrYXNhLnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbSgyKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAgICAgImNvbC1sZy01IG9mZnNldC1sZy0yIGNvbC1tZC02IGQtbm9uZSBkLW1kLWJsb2NrIHdvdyBmYWRlSW5SaWdodCIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjQwMG1zIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL2tvcGktcGVya2FzYS5wbmciKSwKICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pCiAgICAgICAgICAgIF0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbG9hdC1yaWdodCB6IGJnLTEtMiB3b3cgZmFkZUluUmlnaHQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZy1iZy1rYW5hbiBtdC01IiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTMtNC5zdmciKSwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAicm93IG10LXNlY3Rpb24gYWxpZ24taXRlbXMtY2VudGVyIGp1c3RpZnktY29udGVudC1jZW50ZXIiCiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICJjb2wtbGctNiBvZmZzZXQtbGctMSBjb2wtbWQtNiBjb2wtMTIgbWItNSB3b3cgZmFkZUluTGVmdCIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9wcm9kdWsvc2FidW4tZ2FoYXJ1LnBuZyIpLAogICAgICAgICAgICAgICAgICBhbHQ6ICIiCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXQogICAgICAgICAgKSwKICAgICAgICAgIF92bS5fbSgzKQogICAgICAgIF0KICAgICAgKQogICAgXSksCiAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInogYmctMi0xIHdvdyBmYWRlSW5MZWZ0IiB9LCBbCiAgICAgIF9jKCJpbWciLCB7CiAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctYmcta2lyaSBtdC1sZy0wIG10LW1kLTUiLAogICAgICAgIGF0dHJzOiB7CiAgICAgICAgICBzcmM6IHJlcXVpcmUoIkAvYXNzZXRzL2ltYWdlcy9iZXJhbmRhL2JnLXNlY3Rpb24tNC01LnN2ZyIpLAogICAgICAgICAgYWx0OiAiIgogICAgICAgIH0KICAgICAgfSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXIgLW10LXNlY3Rpb24iIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJtdC1sZy0wIG10LW1kLTQiIH0sIFsKICAgICAgICBfYygKICAgICAgICAgICJkaXYiLAogICAgICAgICAgeyBzdGF0aWNDbGFzczogInJvdyBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIgfSwKICAgICAgICAgIFsKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjb2wtbGctNSBvZmZzZXQtbGctMiBjb2wtbWQtNiBjb2wtMTAgZC1tZC1ub25lIGQtYmxvY2sgbXktbWFkdSB3b3cgZmFkZUluIgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpbWctZmx1aWQiLAogICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL3Byb2R1ay9tYWR1LXNtYXJ0LnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSg0KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjb2wtbGctNSBvZmZzZXQtbGctMiBjb2wtbWQtNiBkLW5vbmUgZC1tZC1ibG9jayB3b3cgZmFkZUluUmlnaHQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjQwMG1zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL21hZHUtc21hcnQucG5nIiksCiAgICAgICAgICAgICAgICAgICAgYWx0OiAiIgogICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgIF0KICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSkKICAgIF0pLAogICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJmbG9hdC1yaWdodCB6IGJnLTItMSB3b3cgZmFkZUluUmlnaHQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZy1iZy1rYW5hbiBtdC01IiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTUtNi5zdmciKSwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOgogICAgICAgICAgICAicm93IG10LXNlY3Rpb24tMiBhbGlnbi1pdGVtcy1jZW50ZXIganVzdGlmeS1jb250ZW50LWNlbnRlciIKICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogImNvbC1sZy01IGNvbC1tZC02IGNvbC0xMCBtYi01IHdvdyBmYWRlSW5MZWZ0IiB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiaW1nLWZsdWlkIiwKICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiQC9hc3NldHMvaW1hZ2VzL3Byb2R1ay9qZWxpdGEucG5nIiksCiAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9KQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX3ZtLl9tKDUpCiAgICAgICAgXQogICAgICApCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAieiBiZy0yLTEgd293IGZhZGVJbkxlZnQiIH0sIFsKICAgICAgX2MoImltZyIsIHsKICAgICAgICBzdGF0aWNDbGFzczogImltZy1iZy1raXJpIiwKICAgICAgICBhdHRyczogewogICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvYmVyYW5kYS9iZy1zZWN0aW9uLTYtNy5zdmciKSwKICAgICAgICAgIGFsdDogIiIKICAgICAgICB9CiAgICAgIH0pCiAgICBdKSwKICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIiB9LCBbCiAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29udGFpbmVyIG10LTUgbXQtbWQtMCIgfSwgWwogICAgICAgIF9jKAogICAgICAgICAgImRpdiIsCiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAicm93IGFsaWduLWl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNvbnRlbnQtY2VudGVyIiB9LAogICAgICAgICAgWwogICAgICAgICAgICBfYygKICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczoKICAgICAgICAgICAgICAgICAgImNvbC1sZy01IG9mZnNldC1sZy0xIGNvbC1tZC02IGNvbC0xMCBkLW1kLW5vbmUgZC1ibG9jayBtYi01IHdvdyBmYWRlSW4iCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL3NhcmktZ2FoYXJ1LnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICksCiAgICAgICAgICAgIF92bS5fbSg2KSwKICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6CiAgICAgICAgICAgICAgICAgICJjb2wtbGctNSBvZmZzZXQtbGctMSBjb2wtbWQtNiBkLW5vbmUgZC1tZC1ibG9jayB3b3cgZmFkZUluUmlnaHQiLAogICAgICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjQwMG1zIiB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImltZy1mbHVpZCIsCiAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCJAL2Fzc2V0cy9pbWFnZXMvcHJvZHVrL3NhcmktZ2FoYXJ1LnBuZyIpLAogICAgICAgICAgICAgICAgICAgIGFsdDogIiIKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICBdCiAgICAgICAgICAgICkKICAgICAgICAgIF0KICAgICAgICApCiAgICAgIF0pCiAgICBdKQogIF0pCn0KdmFyIHN0YXRpY1JlbmRlckZucyA9IFsKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTYgY29sLW1kLTYgb2Zmc2V0LTEiIH0sIFsKICAgICAgX2MoImRpdiIsIHt9LCBbCiAgICAgICAgX2MoCiAgICAgICAgICAiaDEiLAogICAgICAgICAgewogICAgICAgICAgICBzdGF0aWNDbGFzczogInQtaG9tZSB3b3cgZmFkZUluUmlnaHQiLAogICAgICAgICAgICBhdHRyczogeyAiZGF0YS13b3ctZGVsYXkiOiAiNDAwbXMiIH0KICAgICAgICAgIH0sCiAgICAgICAgICBbX3ZtLl92KCJQcm9kdWstIFByb2R1ayBNTE0gIiksIF9jKCJiciIpLCBfdm0uX3YoIiBNYWtpbiBKYXlhIEFndW5nIildCiAgICAgICAgKSwKICAgICAgICBfYygKICAgICAgICAgICJwIiwKICAgICAgICAgIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJ0ZXh0LWFidW11ZGEgd293IGZhZGVJblJpZ2h0IiwKICAgICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjYwMG1zIiB9CiAgICAgICAgICB9LAogICAgICAgICAgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgJyJEYXBhdGthbiBwZW5naGFzaWxhbiBpbXBpYW4gYW5kYSB5YW5nIHRhayB0ZXJoaW5nZ2EgZGVuZ2FuIG1lbXBlbGFqYXJpIEpVUlVTIEFKQUlCIGphbWFuIG5vdyB5YW5nIGFrYW4gbWVsZWppdGthbiBwZW5naGFzaWxhbiBhbmRhIGJlcmxpcGF0LWxpcGF0IGJlcnNhbWEgTWlsYWdyb3MuIicKICAgICAgICAgICAgKQogICAgICAgICAgXQogICAgICAgICkKICAgICAgXSkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTQgY29sLW1kLTYgY29sLTEyIG10LTUgbXQtbWQtMCIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImtoYXNpYXQtY2FyZCBtYi00IHdvdyBmYWRlSW5SaWdodCIsCiAgICAgICAgICBhdHRyczogeyAiZGF0YS13b3ctZGVsYXkiOiAiNDAwbXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlRlaCBIaWphdSBHYWhhcnUiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInVsIiwgeyBzdGF0aWNDbGFzczogInRleHQtbGVmdCBtdC00IiB9LCBbCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiVGVoIEdhaGFydSBTZWJhZ2FpIEFudGkgRGVwcmVzIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUZWggR2FoYXJ1IFNlYmFnYWkgQW50aSBQZW51YWFuIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5qYWdhIEJlcmF0IEJhZGFuIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJEZXRva3NpZmlrYXNpIFR1YnVoIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5ndXJhbmdpIFJhc2EgTWFidWsiKV0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbmFtYmFoIEVuZXJnaSIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuZW5hbmdrYW4gVHVidWgiKV0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIkRpYnVhdCBNZW5qYWRpIE1pbnlhayIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWFuZmFhdCBBcm9tYXRlcmFwaSIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHdvdyBmYWRlSW5SaWdodCIsCiAgICAgICAgICBhdHRyczogeyAiZGF0YS13b3ctZGVsYXkiOiAiNjAwbXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bi1iZy1pam8gcm91bmRlZC0xNSBweS0yIHB4LTUiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiT3JkZXIiKV0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTUgY29sLW1kLTYiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQgbWItNCAgd293IGZhZGVJbkxlZnQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImtoYXNpYXQtY2FyZC10aXRsZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIktvcGkgR2FoYXJ1IFBlcmthc2EiKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1sZWZ0IG10LTQiIH0sIFsKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVtYmFudHUgTWVtcGVybGFuY2FyIFBlcmVkYXJhbiBEYXJhaCIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbWJhbnR1IE1lbXBlcmxhbmNhciBNZXRhYm9saXNtZSBUdWJ1aCIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbWJhbnR1IE1lbXBlcmxhbmNhciBIdWJ1bmdhbiBTdWFtaSBJc3RyaSIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1lbWJhbnR1IEtldGFoYW5hbiBEYWxhbSBCZXJodWJ1bmdhbiBTdWFtaSBJc3RyaSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJNZW1iYW50dSBNZW1wZXJrdWF0IERheWEgVGFoYW4gVHVidWggRGFuIEFudGlva3NpZGFuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1lbWJhbnR1IE1lbmluZ2thdGthbiBLb25zZW50cmFzaSBkYW4gRGF5YSBJbmdhdCIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW1wZXJiYWlraSBGdW5nc2kgRXJla3NpIFBhZGEgUHJpYSIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiTWVuaW5na2F0a2FuIFByb2R1a3NpIFNwZXJtYSwgTWVyYW5nc2FuZyBTYXJhZiBTZW5zb3JpayBQYWRhIE9yZ2FuIFNla3N1YWwsIE1lcmFuZ3NhbmcgU2VrcmVzaSBIb3Jtb24gRGFuIE1lbmluZ2thdGthbiBKdW1sYWggRGFuIEtlcGFkYXRhbiBTZXBlcm1hIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgd293IGZhZGVJbkxlZnQiLAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjIwMG1zIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygKICAgICAgICAgICAgImEiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJidG4tYmctaWpvIHJvdW5kZWQtMTUgcHktMiBweC01IiwKICAgICAgICAgICAgICBhdHRyczogeyBocmVmOiAiIiB9CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIFtfdm0uX3YoIk9yZGVyIildCiAgICAgICAgICApCiAgICAgICAgXQogICAgICApCiAgICBdKQogIH0sCiAgZnVuY3Rpb24oKSB7CiAgICB2YXIgX3ZtID0gdGhpcwogICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2gKICAgIHJldHVybiBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNvbC1sZy01IGNvbC1tZC02IGNvbC0xMiIgfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImtoYXNpYXQtY2FyZCBtYi00IHdvdyBmYWRlSW5SaWdodCIsCiAgICAgICAgICBhdHRyczogeyAiZGF0YS13b3ctZGVsYXkiOiAiMjAwbXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICAgIF9jKCJoNSIsIHsgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQtdGl0bGUiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIlNhYnVuIEdhaGFydSIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygidWwiLCB7IHN0YXRpY0NsYXNzOiAidGV4dC1sZWZ0IG10LTQiIH0sIFsKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5jZXJhaGthbiBLdWxpdCIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVtYmVyc2loa2FuIFNpc2Etc2lzYSBLb3NtZXRpayIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiRGFwYXQgTWVyZWdlbmVyYXNpIFNlbCBLdWxpdCBNYXRpIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJwSCBOb3JtYWwgQW1hbiBVbnR1ayBLdWxpdCIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVyb250b2trYW4gS29tZWRvIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJUaWRhayBNZW1idWF0IElyaXRhc2kgUGFkYSBLdWxpdCIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAiTWVuZ2VjaWxrYW4gUG9yaS1wb3JpIEt1bGl0IFNlaGluZ2dhIFRhbXBhayBTZWdhciBkYW4gQXdldCBNdWRhIgogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiTWVtYnVhdCBLdWxpdCBTZWxhbHUgTGVtYmFiLCBIYWx1cyBTZXBlcnRpIEJheWkiKQogICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFsKICAgICAgICAgICAgICAgIF92bS5fdigiUGV3YW5naSBBbGFtaSBEYXJpIEFyb21hdGVyYXBoeSBNaW55YSBTZXJlaCBXYW5naSIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJEYXBhdCBNZW5naGlsYW5na2FuIEZsZWsgSGl0YW0gQmVrYXMgSmVyYXdhdCIpCiAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJNZW1iYW50dSBNZW1hbmNhcmthbiBBdXJhIFBvc2l0aWYgUGFkYSBQZW1ha2FpbnlhIikKICAgICAgICAgICAgICBdKQogICAgICAgICAgICBdKQogICAgICAgICAgXSkKICAgICAgICBdCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJkaXYiLAogICAgICAgIHsKICAgICAgICAgIHN0YXRpY0NsYXNzOiAidGV4dC1jZW50ZXIgd293IGZhZGVJblJpZ2h0IiwKICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdvdy1kZWxheSI6ICI0MDBtcyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWJnLWlqbyByb3VuZGVkLTE1IHB5LTIgcHgtNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJPcmRlciIpXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctNSBjb2wtbWQtNiAiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQgbWItNCB3b3cgZmFkZUluTGVmdCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IGNvbC0xMiIgfSwgWwogICAgICAgICAgX2MoImg1IiwgeyBzdGF0aWNDbGFzczogImtoYXNpYXQtY2FyZC10aXRsZSIgfSwgWwogICAgICAgICAgICBfdm0uX3YoIk1hZHUgU3RhciBCcmFpbiIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWxlZnQgbXQtNCIgfSwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW1wZXJsYW5jYXIgUGVyZWRhcmFuIERhcmFoIEtlIE90YWsiKV0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5pbmdrYXRrYW4gS29uc2VudHJhc2kgRGFuIERheWEgSW5nYXQiKV0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5pbmdrYXRrYW4gS2VrZWJhbGFuIFR1YnVoIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVudW5kYSBLZXBpa3VuYW4gRGluaSIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbmd1cmFuZ2kgUmFzYSBMZWxhaCwgTGV0aWggZGFuIE5nYW50dWsiKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHdvdyBmYWRlSW5MZWZ0IiwKICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdvdy1kZWxheSI6ICIyMDBtcyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWJnLWlqbyByb3VuZGVkLTE1IHB5LTIgcHgtNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJPcmRlciIpXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9LAogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbGctNSBvZmZzZXQtbGctMiBjb2wtbWQtNiBjb2wtMTIiIH0sIFsKICAgICAgX2MoCiAgICAgICAgImRpdiIsCiAgICAgICAgewogICAgICAgICAgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQgbWItNCB3b3cgZmFkZUluUmlnaHQiLAogICAgICAgICAgYXR0cnM6IHsgImRhdGEtd293LWRlbGF5IjogIjIwMG1zIiB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogImNhcmQtYm9keSIgfSwgWwogICAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAia2hhc2lhdC1jYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KCJKZWxpdGEgTWFuamFrYW5pIENvbGxhZ2VuIikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWxlZnQgbXQtNCIgfSwgWwogICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbWJhbnR1IE1lcmF3YXQgT3JnYW4gS2V3YW5pdGFhbiIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVtYmFudHUgTWVuaW5na2F0a2FuIEdhaXJhaCBTZWtzdWFsIFdhbml0YSIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgICAgX3ZtLl92KCJNZW1iYW50dSBNZW5ndXJhbmdpIFJhc2EgU2FraXQgU2FhdCBNZW5zdHJ1YXNpIikKICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW1iYW50dSBNZW5ndXJhbmdpIEtlcHV0aWhhbiIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVsYW5jYXJrYW4gUGVyZWRhcmFuIERhcmFoIildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW1iYW50dSBNZXJlZ2VuZXJhc2kgU2VsIEt1bGl0IE1hdGkiKV0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbWJhbnR1IE1lbmd1cmFuZ2kgS2VydXRhbiIpXSksCiAgICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuZ2FuZHVuZyBBbnRpb2tzaWRhbiBUaW5nZ2kiKV0pLAogICAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lbWJhbnR1IE1lbmNlcmFoa2FuIEt1bGl0IildKSwKICAgICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW1iYW50dSBNZWNlZ2FoIFBlbnVhYW4gRGluaSIpXSkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHdvdyBmYWRlSW5SaWdodCIsCiAgICAgICAgICBhdHRyczogeyAiZGF0YS13b3ctZGVsYXkiOiAiNDAwbXMiIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKAogICAgICAgICAgICAiYSIsCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImJ0bi1iZy1pam8gcm91bmRlZC0xNSBweS0yIHB4LTUiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6ICIiIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgW192bS5fdigiT3JkZXIiKV0KICAgICAgICAgICkKICAgICAgICBdCiAgICAgICkKICAgIF0pCiAgfSwKICBmdW5jdGlvbigpIHsKICAgIHZhciBfdm0gPSB0aGlzCiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnQKICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaAogICAgcmV0dXJuIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLWxnLTUgY29sLW1kLTYiIH0sIFsKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJraGFzaWF0LWNhcmQgbWItNCB3b3cgZmFkZUluTGVmdCIgfSwgWwogICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY2FyZC1ib2R5IiB9LCBbCiAgICAgICAgICBfYygiaDUiLCB7IHN0YXRpY0NsYXNzOiAia2hhc2lhdC1jYXJkLXRpdGxlIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiU2FyaSBEYXVuIEdhaGFydSIpCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJ1bCIsIHsgc3RhdGljQ2xhc3M6ICJ0ZXh0LWxlZnQgbXQtNCIgfSwgWwogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZWxhbmNhcmthbiBCdWFuZyBBaXIgQmVzYXIgZGFuIEtlY2lsIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuaW5na2F0a2FuIEt1YWxpdGFzIFRpZHVyIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVsYW5jYXJrYW4gUGVyZWRhcmFuIERhcmFoIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuY2VnYWggUGVuZ2d1bXBhbGFuIERhcmFoIildKSwKICAgICAgICAgICAgX2MoImxpIiwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJNZXJpbmdhbmthbiBQZW55YWtpdCBBc21hLCBNaWdyYW4sIFJldW1hdGlrLCBFbmNvayBkYW4gSW5mbHVlbnphIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lcmluZ2Fua2FuIFJhZGFuZyBUZW5nZ29yb2thbiIpXSksCiAgICAgICAgICAgIF9jKCJsaSIsIFtfdm0uX3YoIk1lcmluZ2Fua2FuIEdlamFsYSBQZW55YWtpdCBMYW1idW5nIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVtYmFudHUgUmVsYWtzYXNpIFR1YnVoIGRhbiBQaWtpcmFuIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuZ3VyYW5naSBSYXNhIE1hYnVrIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVuaW5na2F0a2FuIERheWEgVGFoYW4gVHVidWgiKV0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5jZWdhaCBLYW5rZXIsIFR1bW9yIGRhbiBBc2FtIFVyYXQiKV0pLAogICAgICAgICAgICBfYygibGkiLCBbX3ZtLl92KCJNZW5nYXRhc2kgS2VwdXRpaGFuIFBhZGEgV2FuaXRhIildKSwKICAgICAgICAgICAgX2MoImxpIiwgW192bS5fdigiTWVueWVtYnVoa2FuIEFtYmV5ZW4iKV0pCiAgICAgICAgICBdKQogICAgICAgIF0pCiAgICAgIF0pLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogInRleHQtY2VudGVyIHdvdyBmYWRlSW5MZWZ0IiwKICAgICAgICAgIGF0dHJzOiB7ICJkYXRhLXdvdy1kZWxheSI6ICIyMDBtcyIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJhIiwKICAgICAgICAgICAgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiYnRuLWJnLWlqbyByb3VuZGVkLTE1IHB5LTIgcHgtNSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsgaHJlZjogIiIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbX3ZtLl92KCJPcmRlciIpXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKQogICAgXSkKICB9Cl0KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}